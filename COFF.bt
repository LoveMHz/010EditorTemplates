//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: COFF.bt
//   Authors: Dustin Holden <dustin@devholden.com>
//   Version: 1.0.0
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
DisasmSetMode(DISASM_X86_32);

enum <uchar> StorageClass { 
    END_OF_FUNCTION = -1,
    NULL = 0,
    AUTOMATIC = 1,
    EXTERNAL = 2,
    STATIC = 3,
    REGISTER = 4,
    EXTERNAL_DEF = 5,
    LABEL = 6,
    UNDEFINED_LABEL = 7,
    MEMBER_OF_STRUCT = 8,
    ARGUMENT = 9,
    STRUCT_TAG = 10,
    MEMBER_OF_UNION = 11,
    UNION_TAG = 12,
    TYPE_DEFINITION = 13,
    UNDEFINED_STATIC = 14,
    ENUM_TAG = 15,
    MEMBER_OF_ENUM = 16,
    REGISTER_PARAM = 17,
    BIT_FIELD = 18,
    BLOCK = 100,
    FUNCTION = 101,
    END_OF_STRUCT = 102,
    FILE = 103,
    SECTION = 104,
    WEAK_EXTERNAL = 105,
    CLR_TOKEN = 107
};

enum <unsigned short> RelocationType { 
    ADDR32 = 6, // 32-bit absolute address
    REL32  = 20 // 32-bit PC-relative address
};

struct {
	unsigned short f_magic  <comment="Magic number">;
	unsigned short f_nscns  <comment="Number of Sections">;
	time_t         f_timdat <comment="Time & date stamp ">;
	long           f_symptr <comment="File pointer to Symbol Table">;
	long           f_nsyms  <comment="Number of Symbols">;
	unsigned short f_opthdr <comment="sizeof(Optional Header)">;
	unsigned short f_flags  <comment="Flags">;
} file_header;

typedef struct relocation_entries_t {
	long           r_vaddr  <comment="Reference Address">;
	long           r_symndx <comment="Symbol index">;
	RelocationType r_type   <comment="Type of relocation">;
};

typedef struct section_t {
	char           s_name[8] <comment="Section Name">;
	long           s_paddr   <comment="Physical Address">;
	long           s_vaddr   <comment="Virtual Address">;
	long           s_size    <comment="Section Size in Bytes">;
	long           s_scnptr  <comment="File offset to the Section data">;
	long           s_relptr  <comment="File offset to the Relocation table for this Section">;
	long           s_lnnoptr <comment="File offset to the Line Number table for this Section">;
	unsigned short s_nreloc  <comment="Number of Relocation table entries">;
	unsigned short s_nlnno   <comment="Number of Line Number table entries">;
	long           s_flags   <comment="Flags for this section">;

    local int64 current_pos = FTell();

    if(s_scnptr > 0) {
        FSeek(s_scnptr);
        Opcode s_data[s_size];
    }

    if(s_relptr > 0) {
        FSeek(s_relptr);
        relocation_entries_t s_relocs[s_nreloc];
    }


    FSeek(current_pos);
};

typedef struct symbol_aux_record_unknown_t {
    char unknown[18];
};

typedef struct symbol_table_t {
	union n_name {
		char name[8];
        struct name_offset {
	        unsigned long zeroes;
	        unsigned long offset;
        } name_offset_t;
	} name <comment="Symbol Name">;
	long		   n_value   <comment="Value of Symbol">;
	short		   n_scnum   <comment="Section Number">;
	unsigned short n_type    <comment="Symbol Type">;
	StorageClass   n_sclass  <comment="Storage Class">;
	char		   n_numaux  <comment="Auxiliary Count">;

    if(name.name_offset_t.zeroes == 0) {
        local int64 current_pos  = FTell();
        local int64 string_table = file_header.f_symptr + (file_header.f_nsyms * 18);

        FSeek(string_table + name.name_offset_t.offset);
        string real_name;
        FSeek(current_pos);
    }

    // TODO: Handle aux records
};

section_t sections[file_header.f_nscns]  <optimize=false>;

FSeek(file_header.f_symptr);

struct {
    local uint32 symbol_count = 0;
    local uint32 aux_count    = 0;

    while(symbol_count < file_header.f_nsyms) {
        if(aux_count == 0) {
            symbol_table_t symbol <optimize=false>;
            aux_count = symbol.n_numaux;
        } else {
            symbol_aux_record_unknown_t symbol <optimize=false>;
            aux_count -= 1;
        }
        symbol_count +=1;
    }
} symbols;